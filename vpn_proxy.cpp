# Розробка та оптимізація VPN-сервісу для корпоративних мереж

Репозиторій містить приклад коду на C++ з Додатку А до випускної кваліфікаційної роботи на тему "Розробка та оптимізація VPN-сервісу для корпоративних мереж".

**УВАГА!** Цей код є **сильно спрощеним прикладом** і **не є повноцінним VPN-сервісом**.

## Опис

Наданий код (`vpn_proxy.cpp`) реалізує базовий **TCP-проксі-сервер**. Він виконує наступні функції:

1.  **Слухає вхідні TCP-з'єднання** на визначеному порту (`LISTEN_PORT`).
2.  Для кожного вхідного з'єднання **встановлює нове TCP-з'єднання** до заздалегідь визначеного цільового сервера (`TARGET_IP`, `TARGET_PORT`).
3.  **Перенаправляє дані** між клієнтом та цільовим сервером в обох напрямках.
4.  Застосовує **дуже просте XOR-"шифрування"** з фіксованим ключем (`XOR_KEY`) до даних під час їх передачі. **Це не забезпечує реальної безпеки!** Метод XOR легко зламується і використовується тут лише для ілюстрації можливості маніпуляції даними.
5.  Використовує **потоки (`std::thread`)** для обробки кожного клієнтського з'єднання паралельно.

**Цей код НЕ реалізує:**

*   Стандартні VPN-протоколи (IPsec, OpenVPN, WireGuard тощо).
*   Створення віртуальних мережевих інтерфейсів (TUN/TAP).
*   Управління IP-адресами для клієнтів.
*   Надійну автентифікацію та безпечне шифрування.
*   Обробку UDP-трафіку або інших протоколів крім TCP.

Він може слугувати навчальним прикладом для розуміння базової роботи з мережевими сокетами та потоками в C++ у контексті перенаправлення трафіку.

## Залежності (Dependencies)

*   **Компілятор C++:** Потрібен компілятор, що підтримує стандарт C++11 або новіший (для `std::thread`). Рекомендовано `g++`.
*   **Операційна система:** Код використовує POSIX Sockets API (`<sys/socket.h>`, `<netinet/in.h>`, `<unistd.h>` тощо). Він повинен компілюватися та працювати на Linux та інших POSIX-сумісних системах (наприклад, macOS). Для Windows може знадобитися адаптація або використання середовищ типу Cygwin/MinGW/WSL.
*   **Бібліотека потоків:** Зазвичай потрібне явне підключення бібліотеки pthreads під час компіляції (прапор `-pthread`).

## Збірка (Build)

Для компіляції коду за допомогою `g++` виконайте в терміналі наступну команду, перебуваючи в каталозі з файлом `vpn_proxy.cpp`:

```bash
g++ vpn_proxy.cpp -o vpn_proxy -std=c++11 -pthread